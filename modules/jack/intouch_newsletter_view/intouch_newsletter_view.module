<?php

/**
 * Implements hook_menu().
 */
function intouch_newsletter_view_menu()
{
    //
    $items['mc-nl-preview/%'] = [
        'type'             => MENU_CALLBACK,
        'page callback'    => 'intouch_newsletter_view__preview',
        'access arguments' => ['administer mailchimp'],
        'page arguments'   => array(1),
    ];
    
    $items['mc-nl-send-test/%'] = [
        'type'             => MENU_CALLBACK,
        'page callback'    => 'intouch_newsletter_view__send_test',
        'access arguments' => ['administer mailchimp'],
        'page arguments'   => array(1),
    ];
    
    $items['mc-nl-send-campaign/%'] = [
        'type'             => MENU_CALLBACK,
        'page callback'    => 'intouch_newsletter_view__send_campaign',
        'access arguments' => ['administer mailchimp'],
        'page arguments'   => array(1),
    ];
    
    return $items;
}

function intouch_newsletter_view__send_campaign($nlid)
{
    $node = __intouch_newsletter_view_loadNewsletterNode($nlid);
    
    
    $out = [
        'container' => [
            '#prefix' => '<div class="container single-articles-wrapper">',
            '#suffix' => '</div>',
            'intro' => [
                '#markup' => '<h3>Newsletter #'.$node->title.'</h3>'
                    . '<h4>Are you sure you want to send this campaign?</h4>',
            ],
            'form' => drupal_get_form("intouch_newsletter_view_sendcampaign_form"),
        ],
    ];
    
    return $out;
}


function intouch_newsletter_view_sendcampaign_form($form, &$form_state)
{
    if(isset($form_state["clicked_button"]["#value"]) && $form_state["clicked_button"]["#value"] == "Cancel")
    {
        drupal_goto('admin/newsletters');
    }
    
    $form['back_link'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
    );
    
    $form['send_link'] = array(
        '#type' => 'button',
        '#value' => t('Send Campaign'),
    );
    
    return $form;
}


function __intouch_newsletter_view__send_campaign($nlid)
{
    __intouch_newsletter_view__update($nlid);
    
    try
    {
        $node = __intouch_newsletter_view_loadNewsletterNode($nlid);
        
        if (!$node)
        {
            throw new \Exception("Newsletter not found!");
        }
    
        $campaignId = false;
        if (isset($node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"])
            && !empty($node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"])
        )
        {
            $campaignId = $node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"];
        }
    
        if (!$campaignId)
        {
            throw new \Exception("Missing campaign ID");
        }
    
        /* @var \Mailchimp\MailchimpCampaigns $mailchimpCampaigns */
        $mailchimpCampaigns = mailchimp_get_api_object('MailchimpCampaigns');
    
        $mailchimpCampaigns->send($campaignId);
        drupal_set_message("Your campaign is on the way...", 'status');
    
        //update node with sent status
        $node->field_mailchimp_campaign_status[LANGUAGE_NONE][0]["value"] = 'sent';
        node_save($node);
        
    }
    catch(Exception $e)
    {
        drupal_set_message($e->getMessage(), 'error');
        watchdog('mailchimp_campaign', 'An error occurred: %message', array(
            '%message' => $e->getMessage(),
        ), WATCHDOG_ERROR);
    }
    
    drupal_goto('admin/newsletters');
    
}



function intouch_newsletter_view__send_test($nlid)
{
    $node = __intouch_newsletter_view_loadNewsletterNode($nlid);
    
    $out = [
        'container' => [
            '#prefix' => '<div class="container single-articles-wrapper">',
            '#suffix' => '</div>',
            'intro' => [
                '#markup' => '<h3>Newsletter #'.$node->title.'</h3>'
                    . '<h4>Are you sure you want to send the tests to 
                the recipients below?</h4>',
            ],
            'form' => drupal_get_form("intouch_newsletter_view_testsend_form"),
        ],
    ];
    
    
    return $out;
}

function intouch_newsletter_view_testsend_form($form, &$form_state) {
    global $user;
    
    if(isset($form_state["clicked_button"]["#value"]) && $form_state["clicked_button"]["#value"] == "Cancel")
    {
        drupal_goto('admin/newsletters');
    }
    
    $recipients = variable_get('intouch_newsletter_view_test_emails', $user->mail);
    
    $form["recipients"] = [
        '#title' => 'Recipients',
        '#type' => 'textarea',
        '#default_value' => $recipients,
        '#required' => TRUE,
        '#description' => 'Insert a comma separated list of emails.',
        '#cols' => 60,
        '#rows' => 3,
    ];
    
    $form['back_link'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
    );
    
    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Send tests'),
    );
    
    return $form;
}


function intouch_newsletter_view_testsend_form_submit($form, &$form_state)
{
    $nid = arg(1);
    
    //dpm($form_state, "FS-SUB");
    
    if(isset($form_state['values']['recipients']))
    {
        variable_set('intouch_newsletter_view_test_emails', $form_state['values']['recipients']);
    }
    
    global $user;
    $recipients = [];
    $recipientList = variable_get('intouch_newsletter_view_test_emails', $user->mail);
    $parts = explode(",", $recipientList);
    foreach($parts as $email)
    {
        $email = trim($email);
        //@todo: check if valid
        if(true)
        {
            $recipients[] = $email;
        }
    }
    
    __intouch_newsletter_view__send_test($nid, $recipients);
}


function __intouch_newsletter_view__send_test($nlid, $recipients)
{
    __intouch_newsletter_view__update($nlid);
    
    try
    {
        $node = __intouch_newsletter_view_loadNewsletterNode($nlid);
        
        if (!$node)
        {
            throw new \Exception("Newsletter not found!");
        }
                
        $campaignId = false;
        if (isset($node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"])
            && !empty($node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"])
        )
        {
            $campaignId = $node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"];
        }
        
        if (!$campaignId)
        {
            throw new \Exception("Missing campaign ID");
        }
        
        /* @var \Mailchimp\MailchimpCampaigns $mailchimpCampaigns */
        $mailchimpCampaigns = mailchimp_get_api_object('MailchimpCampaigns');
        
        $mailchimpCampaigns->sendTest($campaignId, $recipients, \Mailchimp\MailchimpCampaigns::EMAIL_TYPE_HTML);
        
        drupal_set_message("Test sent to: " . json_encode($recipients), 'status');
        
    }
    catch(Exception $e)
    {
        drupal_set_message($e->getMessage(), 'error');
        watchdog('mailchimp_campaign', 'An error occurred: %message', array(
            '%message' => $e->getMessage(),
        ), WATCHDOG_ERROR);
    }
    
    drupal_goto('admin/newsletters');
}

function intouch_newsletter_view__preview($nlid)
{
    if ($node = __intouch_newsletter_view_loadNewsletterNode($nlid))
    {
        $nodeView = node_view($node, 'newsletter', LANGUAGE_NONE);
        $html = drupal_render($nodeView);
        echo $html;
    }
}

function __intouch_newsletter_view__update($nlid)
{
    if ($node = __intouch_newsletter_view_loadNewsletterNode($nlid))
    {
        $campaignId = false;
        if (isset($node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"])
            && !empty($node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"])
        )
        {
            $campaignId = $node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"];
        }
        
        /* @var \Mailchimp\MailchimpCampaigns $mailchimpCampaigns */
        $mailchimpCampaigns = mailchimp_get_api_object('MailchimpCampaigns');
        
        $recipients = new \stdClass();
        $recipients->list_id = "6f623913ac";//"In Touch"
        
        $settings = new \stdClass();
        $settings->title = 'Newsletter #' . $node->title;
        $settings->subject_line = 'Newsletter #' . $node->title;
        $settings->from_name = 'InTouch';
        $settings->reply_to = variable_get('mailchimp_reply_to', 'mc@staff.mekit.it');
        
        // CREATE
        if (!$campaignId)
        {
            try
            {
                if (!$mailchimpCampaigns)
                {
                    throw new MailchimpException('Cannot create campaign without Mailchimp API. Check API key has been entered.');
                }
                $result =
                    $mailchimpCampaigns->addCampaign(\Mailchimp\MailchimpCampaigns::CAMPAIGN_TYPE_REGULAR, $recipients,
                                                     $settings);
                
                if (!empty($result->id))
                {
                    $campaignId = $result->id;
                    $node->field_mailchimp_campaign_id[LANGUAGE_NONE][0]["value"] = $campaignId;
                    $node->field_mailchimp_campaign_status[LANGUAGE_NONE][0]["value"] = 'ready';
                    node_save($node);
                }
            }
            catch(Exception $e)
            {
                drupal_set_message($e->getMessage(), 'error');
                watchdog('mailchimp_campaign', 'An error occurred while creating this campaign: %message', array(
                    '%message' => $e->getMessage(),
                ), WATCHDOG_ERROR);
                
                return null;
            }
        }
        
        if (!$campaignId)
        {
            return null;
        }
        
        //krumo($node);
        //echo "UPDATING Campaign ID: " . $campaignId;
        
        //UPDATE
        try
        {
            if (!$mailchimpCampaigns)
            {
                throw new MailchimpException('Cannot update campaign without Mailchimp API. Check API key has been entered.');
            }
            
            $mailchimpCampaigns->updateCampaign($campaignId, \Mailchimp\MailchimpCampaigns::CAMPAIGN_TYPE_REGULAR,
                                                $recipients, $settings);
            
            $nodeView = node_view($node, 'newsletter', LANGUAGE_NONE);
            $html = drupal_render($nodeView);
            
            $content_parameters = [
                'html' => $html,
            ];
            $mailchimpCampaigns->setCampaignContent($campaignId, $content_parameters);
            
        }
        catch(Exception $e)
        {
            drupal_set_message($e->getMessage(), 'error');
            watchdog('mailchimp_campaign', 'An error occurred while updating this campaign: %message', array(
                '%message' => $e->getMessage(),
            ), WATCHDOG_ERROR);
            
            return null;
        }
    }
}

/**
 * @param string $nlid
 *
 * @return bool|mixed
 */
function __intouch_newsletter_view_loadNewsletterNode($nlid)
{
    $nlid = intval($nlid);
    if (!$nlid)
    {
        return false;
    }
    
    $node = node_load($nlid);
    if (!$node)
    {
        return false;
    }
    
    if (!isset($node->type) || $node->type != "newsletter")
    {
        return false;
    }
    
    return $node;
}